%YAML 1.2
---
name: Karabiner-JSON
file_extensions:
- kjson
scope: source.json
contexts:
  main:
    - include: comments
    - include: jsonkv
    - include: karabiner
  comments:
    - comment: Single-line comment
      match: //.*
      scope: comment.single.line.jsonkv
    - comment: Multi-line comment
      match: /\*
      scope: punctuation.definition.comment.c
      push:
      - meta_scope: comment.block.c
      - match: \*/
        scope: punctuation.definition.comment.c
        pop: true
  jsonkv:
    - comment: Key scopes
      captures:
        1: keyword.other.name.jsonkv
      match: '"(?i)([^\"]+)"\s*?:'
    - comment: String values
      match: '".*"'
      scope: string.quoted.jsonkv
    - comment: Escape characters
      match: \\[tnr"]
      scope: constant.character.escape.jsonkv
    - comment: Numeric values
      match: \d+(?:.\d+)?
      scope: constant.numeric.jsonkv
    - comment: Boolean values
      match: true|false
      scope: constant.language.boolean.jsonkv
    - comment: Null value
      match: 'null'
      scope: constant.language.null.jsonkv
  karabiner:
#    - match: |-
#        (?x)
#          (?=
#            \ *"(
#              type|
#              from|
#              to|
#              to_if_alone|
#              to_if_held_down|
#              to_after_key_up|
#              to_delayed_action|
#              conditions|
#              parameters|
#              description
#            )"
#          )
    - comment: From Block
      match: '(?i)( *\"(from)\":)'
      captures:
        1: from.line.karabiner
        # 2: keyword.from.karabiner
      push:
      - meta_scope: from.block.karabiner
      - match: |-
              (?x)
                (?=
                  \ *"(
                    type|
                    from|
                    to|
                    to_if_alone|
                    to_if_held_down|
                    to_after_key_up|
                    to_delayed_action|
                    conditions|
                    parameters|
                    description
                  )"
                )
        pop: true
      - include: jsonkv
    - comment: To Block
      match: |-
        (?ix)
        (
          \ *"(
            to|
            to_if_alone|
            to_if_held_down|
            to_after_key_up|
            to_delayed_action|
            to_if_invoked|
            to_if_canceled|
          )"
        :
        )
      captures:
        1: to.line.karabiner
        # 2: keyword.to.karabiner
      push:
      - meta_scope: to.block.karabiner
      - match: |-
              (?x)
                (?=
                  \ *"(
                    type|
                    from|
                    to|
                    to_if_alone|
                    to_if_held_down|
                    to_after_key_up|
                    to_delayed_action|
                    to_if_invoked|
                    to_if_canceled|
                    conditions|
                    parameters|
                    description
                  )"
                )
        pop: true
      - include: jsonkv
    - comment: Conditions Block
      match: '(?i)( *\"(conditions)\":)'
      captures:
        1: conditions.line.karabiner
        # 2: keyword.conditions.karabiner
      push:
      - meta_scope: conditions.block.karabiner
      - match: |-
                    (?x)
                      (?=
                        \ *"(
                          type|
                          from|
                          to|
                          to_if_alone|
                          to_if_held_down|
                          to_after_key_up|
                          to_delayed_action|
                          conditions|
                          parameters|
                          description
                        )"
                      )
        pop: true
      - include: jsonkv
    - comment: Parameters Block
      match: '(?i)( *\"(parameters)\":)'
      captures:
        1: parameters.line.karabiner
        # 2: keyword.parameters.karabiner
      push:
      - meta_scope: parameters.block.karabiner
      - match: |-
                    (?x)
                      (?=
                        \ *"(
                          type|
                          from|
                          to|
                          to_if_alone|
                          to_if_held_down|
                          to_after_key_up|
                          to_delayed_action|
                          conditions|
                          parameters|
                          description
                        )"
                      )
        pop: true
      - include: jsonkv
    - comment: Description
      match: '(?i)( *?"description":) "(.*)"'
      captures:
        0: description.line.karabiner
        1: description.line.key.karabiner
        2: description.line.val.karabiner
    - comment: Title
      match: '(?i) *?"(title)": "(.*)"'
      captures:
        0: title.line.karabiner
    - comment: Type
      match: '(?i) *?"(type)": "(?:(basic)|(?!basic)(\w+))"'
      captures:
        0: type.line.karabiner
        1: type.line.key.karabiner
        2: type.line.basic.karabiner
        3: type.line.other.karabiner
# uuid: E5D32078-2329-4420-880F-852AD6647D7C

# # name: Karabiner-JSON
# file_extensions:
#   - json
#   - sublime-settings
#   - sublime-menu
#   - sublime-keymap
#   - sublime-mousemap
#   - sublime-theme
#   - sublime-build
#   - sublime-project
#   - sublime-completions
#   - sublime-commands
#   - sublime-macro
#   - sublime-color-scheme
#   - ipynb
#   - Pipfile.lock
# scope: source.json
# contexts:
#   prototype:
#     - include: comments
#   main:
#     - include: value
#   value:
#     - include: constant
#     - include: number
#     - include: string
#     - include: array
#     - include: object
#   array:
#     - match: '\['
#       scope: punctuation.section.sequence.begin.json
#       push:
#         - meta_scope: meta.sequence.json
#         - match: '\]'
#           scope: punctuation.section.sequence.end.json
#           pop: true
#         - include: value
#         - match: ","
#           scope: punctuation.separator.sequence.json
#         - match: '[^\s\]]'
#           scope: invalid.illegal.expected-sequence-separator.json
#   comments:
#     - match: /\*\*(?!/)
#       scope: punctuation.definition.comment.json
#       push:
#         - meta_scope: comment.block.documentation.json
#         - meta_include_prototype: false
#         - match: \*/
#           pop: true
#     - match: /\*
#       scope: punctuation.definition.comment.json
#       push:
#         - meta_scope: comment.block.json
#         - meta_include_prototype: false
#         - match: \*/
#           pop: true
#     - match: (//).*$\n?
#       scope: comment.line.double-slash.js
#       captures:
#         1: punctuation.definition.comment.json
#   constant:
#     - match: \b(?:true|false|null)\b
#       scope: constant.language.json
#   number:
#     # handles integer and decimal numbers
#     - match: |-
#         (?x:         # turn on extended mode
#           -?         # an optional minus
#           (?:
#             0        # a zero
#             |        # ...or...
#             [1-9]    # a 1-9 character
#             \d*      # followed by zero or more digits
#           )
#           (?:
#             (?:
#               \.     # a period
#               \d+    # followed by one or more digits
#             )?
#             (?:
#               [eE]   # an e character
#               [+-]?  # followed by an option +/-
#               \d+    # followed by one or more digits
#             )?       # make exponent optional
#           )?         # make decimal portion optional
#         )
#       scope: constant.numeric.json
#   object:
#     # a JSON object
#     - match: '\{'
#       scope: punctuation.section.mapping.begin.json
#       push:
#         - meta_scope: meta.mapping.json
#         - match: '\}'
#           scope: punctuation.section.mapping.end.json
#           pop: true
#         - match: '"'
#           scope: punctuation.definition.string.begin.json
#           push:
#             - clear_scopes: 1
#             - meta_scope: meta.mapping.key.json string.quoted.double.json
#             - meta_include_prototype: false
#             - include: inside-string
#         - match: ":"
#           scope: punctuation.separator.mapping.key-value.json
#           push:
#             - match: '(,)|(?=\})'
#               captures:
#                 1: invalid.illegal.expected-mapping-value.json
#               pop: true
#             - match: (?=\S)
#               set:
#                 - clear_scopes: 1
#                 - meta_scope: meta.mapping.value.json
#                 - include: value
#                 - match: ''
#                   set:
#                     - match: '(,)|(?=\s*\})'
#                       captures:
#                         1: punctuation.separator.mapping.pair.json
#                       pop: true
#                     - match: '\s(?=[^\s,])|[^\s,]'
#                       scope: invalid.illegal.expected-mapping-separator.json
#                       pop: true
#         - match: '[^\s\}]'
#           scope: invalid.illegal.expected-mapping-key.json
#   string:
#     - match: '"'
#       scope: punctuation.definition.string.begin.json
#       push: inside-string
#   inside-string:
#     - meta_scope: string.quoted.double.json
#     - meta_include_prototype: false
#     - match: '"'
#       scope: punctuation.definition.string.end.json
#       pop: true
#     - include: string-escape
#     - match: $\n?
#       scope: invalid.illegal.unclosed-string.json
#       pop: true
#   string-escape:
#     - match: |-
#         (?x:                # turn on extended mode
#           \\                # a literal backslash
#           (?:               # ...followed by...
#             ["\\/bfnrt]     # one of these characters
#             |               # ...or...
#             u               # a u
#             [0-9a-fA-F]{4}  # and four hex digits
#           )
#         )
#       scope: constant.character.escape.json
#     - match: \\.
#       scope: invalid.illegal.unrecognized-string-escape.json
